{"version":3,"sources":["TodoItem/TodoItem.js","checkEmptyInput.js","TodoList/Todolist.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","state","isEditing","handleChange","bind","handleClick","handleSubmit","toggleEdit","this","toggleTodos","todoItem","deleteTodos","e","preventDefault","updateTodos","target","input","value","setState","result","className","onSubmit","type","autoComplete","spellCheck","name","autoFocus","required","checked","completed","onChange","title","onClick","React","Component","checkEmptyInput","err","TodoList","todos","getTodos","isError","clearList","storedTodos","localStorage","getItem","JSON","parse","updatedTodos","setItem","stringify","persist","trim","length","saveTodos","id","uuid","todo","newTodos","indexOf","newTitle","oldTodo","findIndex","targetedTodo","find","item","filter","removeItem","cnt","map","errMsg","setTimeout","document","querySelector","innerHTML","placeholder","key","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7d8262e5.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../styles/TodoItem.scss'\r\n\r\nclass TodoItem extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      isEditing: false\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleClick = this.handleClick.bind(this)\r\n    this.handleSubmit = this.handleSubmit.bind(this)\r\n    this.toggleEdit = this.toggleEdit.bind(this)\r\n  }\r\n\r\n  handleChange() {\r\n    this.props.toggleTodos(this.props.todoItem)\r\n  }\r\n\r\n  handleClick() {\r\n    this.props.deleteTodos(this.props.todoItem)\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault()\r\n    this.props.updateTodos(e.target.input.value, this.props.todoItem)\r\n    this.setState({\r\n      isEditing: !this.state.isEditing\r\n    })\r\n  }\r\n\r\n  toggleEdit() {\r\n    this.setState({\r\n      isEditing: !this.state.isEditing\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let result\r\n    if (this.state.isEditing) {\r\n      result = (\r\n        <form className='TodoItem__edit' onSubmit={this.handleSubmit}>\r\n          <input\r\n            className='TodoItem__edit-input'\r\n            type='text'\r\n            autoComplete='off'\r\n            spellCheck='false'\r\n            name='input'\r\n            autoFocus\r\n            required\r\n          />\r\n          <button className='TodoItem__edit-btn'>Save</button>\r\n        </form>\r\n      )\r\n    } else {\r\n      result = (\r\n        <label className='TodoItem__label'>\r\n          <input\r\n            type='checkbox'\r\n            checked={this.props.todoItem.completed}\r\n            onChange={this.handleChange}\r\n            className='TodoItem__label-checkbox'\r\n          ></input>\r\n          <span className='TodoItem__label-customCheckbox'></span>\r\n          <span className='TodoItem__label-title'>\r\n            {this.props.todoItem.title}\r\n          </span>\r\n        </label>\r\n      )\r\n    }\r\n    return (\r\n      <div className='TodoItem'>\r\n        {result}\r\n\r\n        <button className='pen' onClick={this.toggleEdit}>\r\n          <i className='fas fa-pen'></i>\r\n        </button>\r\n        <button onClick={this.handleClick} className='TodoItem__btn'>\r\n          Delete\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TodoItem\r\n","function checkEmptyInput(err) {\r\n  return err ? 'Input cannot be empty' : ''\r\n}\r\n\r\nexport default checkEmptyInput\r\n","import React from 'react'\r\nimport uuid from 'react-uuid'\r\nimport TodoItem from '../TodoItem/TodoItem'\r\nimport '../styles/TodoList.scss'\r\nimport checkEmptyInput from '../checkEmptyInput'\r\n\r\nclass TodoList extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      todos: this.getTodos(),\r\n      isError: false\r\n    }\r\n    this.handleSubmit = this.handleSubmit.bind(this)\r\n    this.toggleTodos = this.toggleTodos.bind(this)\r\n    this.deleteTodos = this.deleteTodos.bind(this)\r\n    this.updateTodos = this.updateTodos.bind(this)\r\n    this.clearList = this.clearList.bind(this)\r\n  }\r\n\r\n  getTodos() {\r\n    const storedTodos = localStorage.getItem('Todos')\r\n    return JSON.parse(storedTodos) || []\r\n  }\r\n\r\n  saveTodos(updatedTodos) {\r\n    localStorage.setItem('Todos', JSON.stringify(updatedTodos))\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault()\r\n    e.persist() // To be able to access e.target.value\r\n\r\n    const isWhiteSpace = e.target.input.value.trim().length === 0\r\n    if (isWhiteSpace) this.setState({ isError: true })\r\n    else {\r\n      this.saveTodos([\r\n        ...this.state.todos,\r\n        {\r\n          id: uuid(),\r\n          title: e.target.input.value,\r\n          completed: false\r\n        }\r\n      ])\r\n\r\n      this.setState({\r\n        todos: this.getTodos(),\r\n        isError: false\r\n      })\r\n    }\r\n    e.target.input.value = ''\r\n  }\r\n\r\n  toggleTodos(todo) {\r\n    let newTodos = [...this.state.todos]\r\n    let targetIndex = this.state.todos.indexOf(todo)\r\n\r\n    newTodos[targetIndex] = {\r\n      id: todo.id,\r\n      title: todo.title,\r\n      completed: !todo.completed\r\n    }\r\n\r\n    this.saveTodos(newTodos)\r\n\r\n    this.setState({\r\n      todos: this.getTodos()\r\n    })\r\n  }\r\n\r\n  updateTodos(newTitle, oldTodo) {\r\n    const newTodos = [...this.state.todos]\r\n    const targetIndex = this.state.todos.findIndex(\r\n      (todo) => todo.id === oldTodo.id\r\n    )\r\n    newTodos[targetIndex] = {\r\n      id: oldTodo.id,\r\n      title: newTitle,\r\n      completed: false\r\n    }\r\n\r\n    this.saveTodos(newTodos)\r\n    this.setState({\r\n      todos: this.getTodos()\r\n    })\r\n  }\r\n\r\n  deleteTodos(todo) {\r\n    const targetedTodo = this.state.todos.find((item) => item.id === todo.id)\r\n\r\n    const newTodos = this.state.todos.filter((item) => item !== targetedTodo)\r\n    this.saveTodos(newTodos)\r\n\r\n    this.setState({\r\n      todos: this.getTodos()\r\n    })\r\n  }\r\n\r\n  clearList() {\r\n    localStorage.removeItem('Todos')\r\n\r\n    this.setState({\r\n      todos: []\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let cnt = 0\r\n    this.state.todos.map((todo) => (todo.completed ? cnt : cnt++))\r\n\r\n    let errMsg = checkEmptyInput(this.state.isError)\r\n\r\n    setTimeout(function() {\r\n      document.querySelector('.err').innerHTML = ''\r\n    }, 1500)\r\n\r\n    return (\r\n      <div className='TodoList'>\r\n        <p className='TodoList__message'>\r\n          You have {<span className='TodoList__message-cnt'>{cnt}</span>} to-dos\r\n          left\r\n        </p>\r\n\r\n        <form onSubmit={this.handleSubmit} className='TodoList__form'>\r\n          <input\r\n            type='text'\r\n            name='input'\r\n            placeholder='Add a to-do'\r\n            className='TodoList__form-input'\r\n            autoComplete='off'\r\n            required\r\n          ></input>\r\n          <button className='TodoList__form-btn'>Add</button>\r\n        </form>\r\n\r\n        <div className='err'>{errMsg}</div>\r\n\r\n        <div className='TodoList__todos'>\r\n          {this.state.todos.map((todo) => {\r\n            return (\r\n              <TodoItem\r\n                key={todo.id}\r\n                todoItem={todo}\r\n                toggleTodos={this.toggleTodos}\r\n                deleteTodos={this.deleteTodos}\r\n                updateTodos={this.updateTodos}\r\n              />\r\n            )\r\n          })}\r\n        </div>\r\n        <p onClick={this.clearList} className='TodoList__clear'>\r\n          Clear all\r\n        </p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TodoList\r\n","import React from 'react'\nimport './styles/App.scss'\nimport TodoList from './TodoList/Todolist'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <TodoList />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}